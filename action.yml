name: emulate
description: Emulate unsupported operating systems using QEMU.
inputs:
  operating-system:
    description: The operating-system specifier.
    required: true
runs:
  using: composite
  steps:
  - name: Setup QEMU and the guest OS virtual machine.
    shell: bash
    env:
      GUEST_OS: ${{ inputs.operating-system }}
    run: |
      EMULATE_VAGRANT_PATH="$GITHUB_ACTION_PATH/$GUEST_OS"

      test -d "$EMULATE_VAGRANT_PATH"

      if [[ "$RUNNER_OS" == macOS ]]; then
        brew install qemu libvirt vagrant
        brew services start libvirt
        vagrant plugin install vagrant-libvirt
      elif [[ "$RUNNER_OS" == Linux ]]; then
        sudo apt-get install --yes --no-install-recommends \
          vagrant \
          vagrant-libvirt \
          libvirt-daemon \
          libvirt-daemon-system \
          qemu-kvm \
          qemu-utils \
          >/dev/null 2>&1
      fi
 
      # Intercept the original `run` bash scripts by copying them to
      # another file. This allows us to "inject" a new shell script
      # that will "forward" the original shell `run` steps to the guest.
      for run_script in "$(dirname "$BASH_SOURCE")"/*.sh
      do
        intercepted="$(mktemp)"
        mv -f "$run_script" "$intercepted"
        echo "cd '$EMULATE_VAGRANT_PATH' && exec sudo vagrant ssh -c \"\$(cat '$intercepted')\"" > "$run_script"
      done

      cd "$EMULATE_VAGRANT_PATH"
      nice -n -20 sudo vagrant up
