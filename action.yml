name: emulate
description: Emulate unsupported operating systems using QEMU.
inputs:
  operating-system:
    description: The operating-system specifier.
    required: true
runs:
  using: composite
  steps:
  - name: Setup QEMU and the guest OS virtual machine.
    shell: bash
    env:
      GUEST_OS: ${{ inputs.operating-system }}
    run: |
      EMULATE_VAGRANT_PATH="$GITHUB_ACTION_PATH/$GUEST_OS"

      test -d "$EMULATE_VAGRANT_PATH"

      if [[ "$RUNNER_OS" == macOS ]]; then
        brew install qemu libvirt vagrant
        brew services start libvirt
        vagrant plugin install vagrant-libvirt
      elif [[ "$RUNNER_OS" == Linux ]]; then
        sudo apt-get install --yes --no-install-recommends \
          vagrant \
          vagrant-libvirt \
          libvirt-daemon \
          libvirt-daemon-system \
          qemu-kvm \
          qemu-utils \
          >/dev/null 2>&1
      fi
 
      if [[ "$RUNNER_OS" == macOS ]]; then
        for script in /Users/runner/work/_temp/*.sh
        do
          temp="$(dirname "$script")/$(basename "$(mktemp -u)")"
          mv "$script" "$temp"
          cat >"$script" <<EOF
          set -x
          cd '$EMULATE_VAGRANT_PATH' && exec sudo vagrant ssh -c "\$(cat '$temp')"  
          EOF
        done
      elif [[ "$RUNNER_OS" == Linux ]]; then
        # Intercept the `run` steps to send the script to the VM.
        sudo ln -f "$GITHUB_ACTION_PATH/shell" /bin/bash

        # The `vagrant ssh` command (in `shell`) is "path-aware", so it must be
        # executed from within the directory of the Vagrantfile. Rather than 
        # hardcode this path in `shell` or require the user to supply it, let's
        # persist it in the environment.
        echo "EMULATE_VAGRANT_PATH=$EMULATE_VAGRANT_PATH" >> "$GITHUB_ENV"
      fi

      cd "$EMULATE_VAGRANT_PATH"
      nice -n -20 sudo vagrant up
